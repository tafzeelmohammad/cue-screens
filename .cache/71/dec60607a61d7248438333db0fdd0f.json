{"id":"node_modules/lodash/_equalByTag.js","dependencies":[{"name":"F:\\cue-screens\\package.json","includedInParent":true,"mtime":1644311015407},{"name":"F:\\cue-screens\\.babelrc","includedInParent":true,"mtime":1644310991266},{"name":"F:\\cue-screens\\node_modules\\lodash\\package.json","includedInParent":true,"mtime":1644311008925},{"name":"./_Symbol","loc":{"line":1,"column":21},"parent":"F:\\cue-screens\\node_modules\\lodash\\_equalByTag.js","resolved":"F:\\cue-screens\\node_modules\\lodash\\_Symbol.js"},{"name":"./_Uint8Array","loc":{"line":2,"column":25},"parent":"F:\\cue-screens\\node_modules\\lodash\\_equalByTag.js","resolved":"F:\\cue-screens\\node_modules\\lodash\\_Uint8Array.js"},{"name":"./eq","loc":{"line":3,"column":17},"parent":"F:\\cue-screens\\node_modules\\lodash\\_equalByTag.js","resolved":"F:\\cue-screens\\node_modules\\lodash\\eq.js"},{"name":"./_equalArrays","loc":{"line":4,"column":26},"parent":"F:\\cue-screens\\node_modules\\lodash\\_equalByTag.js","resolved":"F:\\cue-screens\\node_modules\\lodash\\_equalArrays.js"},{"name":"./_mapToArray","loc":{"line":5,"column":25},"parent":"F:\\cue-screens\\node_modules\\lodash\\_equalByTag.js","resolved":"F:\\cue-screens\\node_modules\\lodash\\_mapToArray.js"},{"name":"./_setToArray","loc":{"line":6,"column":25},"parent":"F:\\cue-screens\\node_modules\\lodash\\_equalByTag.js","resolved":"F:\\cue-screens\\node_modules\\lodash\\_setToArray.js"}],"generated":{"js":"var Symbol = require('./_Symbol'),\r\n    Uint8Array = require('./_Uint8Array'),\r\n    eq = require('./eq'),\r\n    equalArrays = require('./_equalArrays'),\r\n    mapToArray = require('./_mapToArray'),\r\n    setToArray = require('./_setToArray');\r\n\r\n/** Used to compose bitmasks for value comparisons. */\r\nvar COMPARE_PARTIAL_FLAG = 1,\r\n    COMPARE_UNORDERED_FLAG = 2;\r\n\r\n/** `Object#toString` result references. */\r\nvar boolTag = '[object Boolean]',\r\n    dateTag = '[object Date]',\r\n    errorTag = '[object Error]',\r\n    mapTag = '[object Map]',\r\n    numberTag = '[object Number]',\r\n    regexpTag = '[object RegExp]',\r\n    setTag = '[object Set]',\r\n    stringTag = '[object String]',\r\n    symbolTag = '[object Symbol]';\r\n\r\nvar arrayBufferTag = '[object ArrayBuffer]',\r\n    dataViewTag = '[object DataView]';\r\n\r\n/** Used to convert symbols to primitives and strings. */\r\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\r\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\r\n\r\n/**\r\n * A specialized version of `baseIsEqualDeep` for comparing objects of\r\n * the same `toStringTag`.\r\n *\r\n * **Note:** This function only supports comparing values with tags of\r\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\r\n *\r\n * @private\r\n * @param {Object} object The object to compare.\r\n * @param {Object} other The other object to compare.\r\n * @param {string} tag The `toStringTag` of the objects to compare.\r\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\r\n * @param {Function} customizer The function to customize comparisons.\r\n * @param {Function} equalFunc The function to determine equivalents of values.\r\n * @param {Object} stack Tracks traversed `object` and `other` objects.\r\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\r\n */\r\nfunction equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\r\n  switch (tag) {\r\n    case dataViewTag:\r\n      if ((object.byteLength != other.byteLength) ||\r\n          (object.byteOffset != other.byteOffset)) {\r\n        return false;\r\n      }\r\n      object = object.buffer;\r\n      other = other.buffer;\r\n\r\n    case arrayBufferTag:\r\n      if ((object.byteLength != other.byteLength) ||\r\n          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\r\n        return false;\r\n      }\r\n      return true;\r\n\r\n    case boolTag:\r\n    case dateTag:\r\n    case numberTag:\r\n      // Coerce booleans to `1` or `0` and dates to milliseconds.\r\n      // Invalid dates are coerced to `NaN`.\r\n      return eq(+object, +other);\r\n\r\n    case errorTag:\r\n      return object.name == other.name && object.message == other.message;\r\n\r\n    case regexpTag:\r\n    case stringTag:\r\n      // Coerce regexes to strings and treat strings, primitives and objects,\r\n      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\r\n      // for more details.\r\n      return object == (other + '');\r\n\r\n    case mapTag:\r\n      var convert = mapToArray;\r\n\r\n    case setTag:\r\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\r\n      convert || (convert = setToArray);\r\n\r\n      if (object.size != other.size && !isPartial) {\r\n        return false;\r\n      }\r\n      // Assume cyclic values are equal.\r\n      var stacked = stack.get(object);\r\n      if (stacked) {\r\n        return stacked == other;\r\n      }\r\n      bitmask |= COMPARE_UNORDERED_FLAG;\r\n\r\n      // Recursively compare objects (susceptible to call stack limits).\r\n      stack.set(object, other);\r\n      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\r\n      stack['delete'](object);\r\n      return result;\r\n\r\n    case symbolTag:\r\n      if (symbolValueOf) {\r\n        return symbolValueOf.call(object) == symbolValueOf.call(other);\r\n      }\r\n  }\r\n  return false;\r\n}\r\n\r\nmodule.exports = equalByTag;\r\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/lodash/_equalByTag.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/lodash/_equalByTag.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/lodash/_equalByTag.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/lodash/_equalByTag.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/lodash/_equalByTag.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/lodash/_equalByTag.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/lodash/_equalByTag.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/lodash/_equalByTag.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/lodash/_equalByTag.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/lodash/_equalByTag.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/lodash/_equalByTag.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/lodash/_equalByTag.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/lodash/_equalByTag.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/lodash/_equalByTag.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/lodash/_equalByTag.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/lodash/_equalByTag.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/lodash/_equalByTag.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/lodash/_equalByTag.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/lodash/_equalByTag.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/lodash/_equalByTag.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/lodash/_equalByTag.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/lodash/_equalByTag.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/lodash/_equalByTag.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/lodash/_equalByTag.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/lodash/_equalByTag.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/lodash/_equalByTag.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/lodash/_equalByTag.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/lodash/_equalByTag.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/lodash/_equalByTag.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/lodash/_equalByTag.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/lodash/_equalByTag.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/lodash/_equalByTag.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/lodash/_equalByTag.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/lodash/_equalByTag.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/lodash/_equalByTag.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/lodash/_equalByTag.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/lodash/_equalByTag.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/lodash/_equalByTag.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/lodash/_equalByTag.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/lodash/_equalByTag.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/lodash/_equalByTag.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/lodash/_equalByTag.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/lodash/_equalByTag.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/lodash/_equalByTag.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/lodash/_equalByTag.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/lodash/_equalByTag.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/lodash/_equalByTag.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/lodash/_equalByTag.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/lodash/_equalByTag.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/lodash/_equalByTag.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/lodash/_equalByTag.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/lodash/_equalByTag.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/lodash/_equalByTag.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/lodash/_equalByTag.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/lodash/_equalByTag.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/lodash/_equalByTag.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/lodash/_equalByTag.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/lodash/_equalByTag.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/lodash/_equalByTag.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/lodash/_equalByTag.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/lodash/_equalByTag.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/lodash/_equalByTag.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/lodash/_equalByTag.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/lodash/_equalByTag.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/lodash/_equalByTag.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/lodash/_equalByTag.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/lodash/_equalByTag.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/lodash/_equalByTag.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/lodash/_equalByTag.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/lodash/_equalByTag.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/lodash/_equalByTag.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/lodash/_equalByTag.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/lodash/_equalByTag.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/lodash/_equalByTag.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/lodash/_equalByTag.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/lodash/_equalByTag.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/lodash/_equalByTag.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/lodash/_equalByTag.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/lodash/_equalByTag.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/lodash/_equalByTag.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/lodash/_equalByTag.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/lodash/_equalByTag.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/lodash/_equalByTag.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/lodash/_equalByTag.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/lodash/_equalByTag.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/lodash/_equalByTag.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/lodash/_equalByTag.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/lodash/_equalByTag.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/lodash/_equalByTag.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/lodash/_equalByTag.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/lodash/_equalByTag.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/lodash/_equalByTag.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/lodash/_equalByTag.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/lodash/_equalByTag.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/lodash/_equalByTag.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/lodash/_equalByTag.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/lodash/_equalByTag.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/lodash/_equalByTag.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/lodash/_equalByTag.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/lodash/_equalByTag.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/lodash/_equalByTag.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/lodash/_equalByTag.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/lodash/_equalByTag.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/lodash/_equalByTag.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/lodash/_equalByTag.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/lodash/_equalByTag.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/lodash/_equalByTag.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/lodash/_equalByTag.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/lodash/_equalByTag.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/lodash/_equalByTag.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/lodash/_equalByTag.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/lodash/_equalByTag.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/lodash/_equalByTag.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}}],"sources":{"node_modules/lodash/_equalByTag.js":"var Symbol = require('./_Symbol'),\r\n    Uint8Array = require('./_Uint8Array'),\r\n    eq = require('./eq'),\r\n    equalArrays = require('./_equalArrays'),\r\n    mapToArray = require('./_mapToArray'),\r\n    setToArray = require('./_setToArray');\r\n\r\n/** Used to compose bitmasks for value comparisons. */\r\nvar COMPARE_PARTIAL_FLAG = 1,\r\n    COMPARE_UNORDERED_FLAG = 2;\r\n\r\n/** `Object#toString` result references. */\r\nvar boolTag = '[object Boolean]',\r\n    dateTag = '[object Date]',\r\n    errorTag = '[object Error]',\r\n    mapTag = '[object Map]',\r\n    numberTag = '[object Number]',\r\n    regexpTag = '[object RegExp]',\r\n    setTag = '[object Set]',\r\n    stringTag = '[object String]',\r\n    symbolTag = '[object Symbol]';\r\n\r\nvar arrayBufferTag = '[object ArrayBuffer]',\r\n    dataViewTag = '[object DataView]';\r\n\r\n/** Used to convert symbols to primitives and strings. */\r\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\r\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\r\n\r\n/**\r\n * A specialized version of `baseIsEqualDeep` for comparing objects of\r\n * the same `toStringTag`.\r\n *\r\n * **Note:** This function only supports comparing values with tags of\r\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\r\n *\r\n * @private\r\n * @param {Object} object The object to compare.\r\n * @param {Object} other The other object to compare.\r\n * @param {string} tag The `toStringTag` of the objects to compare.\r\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\r\n * @param {Function} customizer The function to customize comparisons.\r\n * @param {Function} equalFunc The function to determine equivalents of values.\r\n * @param {Object} stack Tracks traversed `object` and `other` objects.\r\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\r\n */\r\nfunction equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\r\n  switch (tag) {\r\n    case dataViewTag:\r\n      if ((object.byteLength != other.byteLength) ||\r\n          (object.byteOffset != other.byteOffset)) {\r\n        return false;\r\n      }\r\n      object = object.buffer;\r\n      other = other.buffer;\r\n\r\n    case arrayBufferTag:\r\n      if ((object.byteLength != other.byteLength) ||\r\n          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\r\n        return false;\r\n      }\r\n      return true;\r\n\r\n    case boolTag:\r\n    case dateTag:\r\n    case numberTag:\r\n      // Coerce booleans to `1` or `0` and dates to milliseconds.\r\n      // Invalid dates are coerced to `NaN`.\r\n      return eq(+object, +other);\r\n\r\n    case errorTag:\r\n      return object.name == other.name && object.message == other.message;\r\n\r\n    case regexpTag:\r\n    case stringTag:\r\n      // Coerce regexes to strings and treat strings, primitives and objects,\r\n      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\r\n      // for more details.\r\n      return object == (other + '');\r\n\r\n    case mapTag:\r\n      var convert = mapToArray;\r\n\r\n    case setTag:\r\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\r\n      convert || (convert = setToArray);\r\n\r\n      if (object.size != other.size && !isPartial) {\r\n        return false;\r\n      }\r\n      // Assume cyclic values are equal.\r\n      var stacked = stack.get(object);\r\n      if (stacked) {\r\n        return stacked == other;\r\n      }\r\n      bitmask |= COMPARE_UNORDERED_FLAG;\r\n\r\n      // Recursively compare objects (susceptible to call stack limits).\r\n      stack.set(object, other);\r\n      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\r\n      stack['delete'](object);\r\n      return result;\r\n\r\n    case symbolTag:\r\n      if (symbolValueOf) {\r\n        return symbolValueOf.call(object) == symbolValueOf.call(other);\r\n      }\r\n  }\r\n  return false;\r\n}\r\n\r\nmodule.exports = equalByTag;\r\n"},"lineCount":113}},"error":null,"hash":"663ac44f60348aa598c48a75fe572bb5","cacheData":{"env":{}}}