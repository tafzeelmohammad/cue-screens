{"id":"node_modules/lodash/_stringToPath.js","dependencies":[{"name":"F:\\cue-screens\\package.json","includedInParent":true,"mtime":1644311015407},{"name":"F:\\cue-screens\\.babelrc","includedInParent":true,"mtime":1644310991266},{"name":"F:\\cue-screens\\node_modules\\lodash\\package.json","includedInParent":true,"mtime":1644311008925},{"name":"./_memoizeCapped","loc":{"line":1,"column":28},"parent":"F:\\cue-screens\\node_modules\\lodash\\_stringToPath.js","resolved":"F:\\cue-screens\\node_modules\\lodash\\_memoizeCapped.js"}],"generated":{"js":"var memoizeCapped = require('./_memoizeCapped');\r\n\r\n/** Used to match property names within property paths. */\r\nvar rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\r\n\r\n/** Used to match backslashes in property paths. */\r\nvar reEscapeChar = /\\\\(\\\\)?/g;\r\n\r\n/**\r\n * Converts `string` to a property path array.\r\n *\r\n * @private\r\n * @param {string} string The string to convert.\r\n * @returns {Array} Returns the property path array.\r\n */\r\nvar stringToPath = memoizeCapped(function(string) {\r\n  var result = [];\r\n  if (string.charCodeAt(0) === 46 /* . */) {\r\n    result.push('');\r\n  }\r\n  string.replace(rePropName, function(match, number, quote, subString) {\r\n    result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));\r\n  });\r\n  return result;\r\n});\r\n\r\nmodule.exports = stringToPath;\r\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/lodash/_stringToPath.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/lodash/_stringToPath.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/lodash/_stringToPath.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/lodash/_stringToPath.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/lodash/_stringToPath.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/lodash/_stringToPath.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/lodash/_stringToPath.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/lodash/_stringToPath.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/lodash/_stringToPath.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/lodash/_stringToPath.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/lodash/_stringToPath.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/lodash/_stringToPath.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/lodash/_stringToPath.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/lodash/_stringToPath.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/lodash/_stringToPath.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/lodash/_stringToPath.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/lodash/_stringToPath.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/lodash/_stringToPath.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/lodash/_stringToPath.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/lodash/_stringToPath.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/lodash/_stringToPath.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/lodash/_stringToPath.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/lodash/_stringToPath.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/lodash/_stringToPath.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/lodash/_stringToPath.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/lodash/_stringToPath.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/lodash/_stringToPath.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/lodash/_stringToPath.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}}],"sources":{"node_modules/lodash/_stringToPath.js":"var memoizeCapped = require('./_memoizeCapped');\r\n\r\n/** Used to match property names within property paths. */\r\nvar rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\r\n\r\n/** Used to match backslashes in property paths. */\r\nvar reEscapeChar = /\\\\(\\\\)?/g;\r\n\r\n/**\r\n * Converts `string` to a property path array.\r\n *\r\n * @private\r\n * @param {string} string The string to convert.\r\n * @returns {Array} Returns the property path array.\r\n */\r\nvar stringToPath = memoizeCapped(function(string) {\r\n  var result = [];\r\n  if (string.charCodeAt(0) === 46 /* . */) {\r\n    result.push('');\r\n  }\r\n  string.replace(rePropName, function(match, number, quote, subString) {\r\n    result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));\r\n  });\r\n  return result;\r\n});\r\n\r\nmodule.exports = stringToPath;\r\n"},"lineCount":28}},"error":null,"hash":"5f64980c89c8402b5288b00f9d09b2b5","cacheData":{"env":{}}}