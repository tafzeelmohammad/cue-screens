{"id":"node_modules/toposort/index.js","dependencies":[{"name":"F:\\cue-screens\\package.json","includedInParent":true,"mtime":1644311015407},{"name":"F:\\cue-screens\\.babelrc","includedInParent":true,"mtime":1644310991266},{"name":"F:\\cue-screens\\node_modules\\toposort\\package.json","includedInParent":true,"mtime":1644311014358}],"generated":{"js":"\r\n/**\r\n * Topological sorting function\r\n *\r\n * @param {Array} edges\r\n * @returns {Array}\r\n */\r\n\r\nmodule.exports = function(edges) {\r\n  return toposort(uniqueNodes(edges), edges)\r\n}\r\n\r\nmodule.exports.array = toposort\r\n\r\nfunction toposort(nodes, edges) {\r\n  var cursor = nodes.length\r\n    , sorted = new Array(cursor)\r\n    , visited = {}\r\n    , i = cursor\r\n    // Better data structures make algorithm much faster.\r\n    , outgoingEdges = makeOutgoingEdges(edges)\r\n    , nodesHash = makeNodesHash(nodes)\r\n\r\n  // check for unknown nodes\r\n  edges.forEach(function(edge) {\r\n    if (!nodesHash.has(edge[0]) || !nodesHash.has(edge[1])) {\r\n      throw new Error('Unknown node. There is an unknown node in the supplied edges.')\r\n    }\r\n  })\r\n\r\n  while (i--) {\r\n    if (!visited[i]) visit(nodes[i], i, new Set())\r\n  }\r\n\r\n  return sorted\r\n\r\n  function visit(node, i, predecessors) {\r\n    if(predecessors.has(node)) {\r\n      var nodeRep\r\n      try {\r\n        nodeRep = \", node was:\" + JSON.stringify(node)\r\n      } catch(e) {\r\n        nodeRep = \"\"\r\n      }\r\n      throw new Error('Cyclic dependency' + nodeRep)\r\n    }\r\n\r\n    if (!nodesHash.has(node)) {\r\n      throw new Error('Found unknown node. Make sure to provided all involved nodes. Unknown node: '+JSON.stringify(node))\r\n    }\r\n\r\n    if (visited[i]) return;\r\n    visited[i] = true\r\n\r\n    var outgoing = outgoingEdges.get(node) || new Set()\r\n    outgoing = Array.from(outgoing)\r\n\r\n    if (i = outgoing.length) {\r\n      predecessors.add(node)\r\n      do {\r\n        var child = outgoing[--i]\r\n        visit(child, nodesHash.get(child), predecessors)\r\n      } while (i)\r\n      predecessors.delete(node)\r\n    }\r\n\r\n    sorted[--cursor] = node\r\n  }\r\n}\r\n\r\nfunction uniqueNodes(arr){\r\n  var res = new Set()\r\n  for (var i = 0, len = arr.length; i < len; i++) {\r\n    var edge = arr[i]\r\n    res.add(edge[0])\r\n    res.add(edge[1])\r\n  }\r\n  return Array.from(res)\r\n}\r\n\r\nfunction makeOutgoingEdges(arr){\r\n  var edges = new Map()\r\n  for (var i = 0, len = arr.length; i < len; i++) {\r\n    var edge = arr[i]\r\n    if (!edges.has(edge[0])) edges.set(edge[0], new Set())\r\n    if (!edges.has(edge[1])) edges.set(edge[1], new Set())\r\n    edges.get(edge[0]).add(edge[1])\r\n  }\r\n  return edges\r\n}\r\n\r\nfunction makeNodesHash(arr){\r\n  var res = new Map()\r\n  for (var i = 0, len = arr.length; i < len; i++) {\r\n    res.set(arr[i], i)\r\n  }\r\n  return res\r\n}\r\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/toposort/index.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/toposort/index.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/toposort/index.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/toposort/index.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/toposort/index.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/toposort/index.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/toposort/index.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/toposort/index.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/toposort/index.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/toposort/index.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/toposort/index.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/toposort/index.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/toposort/index.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/toposort/index.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/toposort/index.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/toposort/index.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/toposort/index.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/toposort/index.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/toposort/index.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/toposort/index.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/toposort/index.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/toposort/index.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/toposort/index.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/toposort/index.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/toposort/index.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/toposort/index.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/toposort/index.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/toposort/index.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/toposort/index.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/toposort/index.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/toposort/index.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/toposort/index.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/toposort/index.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/toposort/index.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/toposort/index.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/toposort/index.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/toposort/index.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/toposort/index.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/toposort/index.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/toposort/index.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/toposort/index.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/toposort/index.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/toposort/index.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/toposort/index.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/toposort/index.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/toposort/index.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/toposort/index.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/toposort/index.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/toposort/index.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/toposort/index.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/toposort/index.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/toposort/index.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/toposort/index.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/toposort/index.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/toposort/index.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/toposort/index.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/toposort/index.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/toposort/index.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/toposort/index.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/toposort/index.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/toposort/index.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/toposort/index.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/toposort/index.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/toposort/index.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/toposort/index.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/toposort/index.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/toposort/index.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/toposort/index.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/toposort/index.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/toposort/index.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/toposort/index.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/toposort/index.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/toposort/index.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/toposort/index.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/toposort/index.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/toposort/index.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/toposort/index.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/toposort/index.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/toposort/index.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/toposort/index.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/toposort/index.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/toposort/index.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/toposort/index.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/toposort/index.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/toposort/index.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/toposort/index.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/toposort/index.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/toposort/index.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/toposort/index.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/toposort/index.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/toposort/index.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/toposort/index.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/toposort/index.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/toposort/index.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/toposort/index.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/toposort/index.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/toposort/index.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/toposort/index.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/toposort/index.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}}],"sources":{"node_modules/toposort/index.js":"\r\n/**\r\n * Topological sorting function\r\n *\r\n * @param {Array} edges\r\n * @returns {Array}\r\n */\r\n\r\nmodule.exports = function(edges) {\r\n  return toposort(uniqueNodes(edges), edges)\r\n}\r\n\r\nmodule.exports.array = toposort\r\n\r\nfunction toposort(nodes, edges) {\r\n  var cursor = nodes.length\r\n    , sorted = new Array(cursor)\r\n    , visited = {}\r\n    , i = cursor\r\n    // Better data structures make algorithm much faster.\r\n    , outgoingEdges = makeOutgoingEdges(edges)\r\n    , nodesHash = makeNodesHash(nodes)\r\n\r\n  // check for unknown nodes\r\n  edges.forEach(function(edge) {\r\n    if (!nodesHash.has(edge[0]) || !nodesHash.has(edge[1])) {\r\n      throw new Error('Unknown node. There is an unknown node in the supplied edges.')\r\n    }\r\n  })\r\n\r\n  while (i--) {\r\n    if (!visited[i]) visit(nodes[i], i, new Set())\r\n  }\r\n\r\n  return sorted\r\n\r\n  function visit(node, i, predecessors) {\r\n    if(predecessors.has(node)) {\r\n      var nodeRep\r\n      try {\r\n        nodeRep = \", node was:\" + JSON.stringify(node)\r\n      } catch(e) {\r\n        nodeRep = \"\"\r\n      }\r\n      throw new Error('Cyclic dependency' + nodeRep)\r\n    }\r\n\r\n    if (!nodesHash.has(node)) {\r\n      throw new Error('Found unknown node. Make sure to provided all involved nodes. Unknown node: '+JSON.stringify(node))\r\n    }\r\n\r\n    if (visited[i]) return;\r\n    visited[i] = true\r\n\r\n    var outgoing = outgoingEdges.get(node) || new Set()\r\n    outgoing = Array.from(outgoing)\r\n\r\n    if (i = outgoing.length) {\r\n      predecessors.add(node)\r\n      do {\r\n        var child = outgoing[--i]\r\n        visit(child, nodesHash.get(child), predecessors)\r\n      } while (i)\r\n      predecessors.delete(node)\r\n    }\r\n\r\n    sorted[--cursor] = node\r\n  }\r\n}\r\n\r\nfunction uniqueNodes(arr){\r\n  var res = new Set()\r\n  for (var i = 0, len = arr.length; i < len; i++) {\r\n    var edge = arr[i]\r\n    res.add(edge[0])\r\n    res.add(edge[1])\r\n  }\r\n  return Array.from(res)\r\n}\r\n\r\nfunction makeOutgoingEdges(arr){\r\n  var edges = new Map()\r\n  for (var i = 0, len = arr.length; i < len; i++) {\r\n    var edge = arr[i]\r\n    if (!edges.has(edge[0])) edges.set(edge[0], new Set())\r\n    if (!edges.has(edge[1])) edges.set(edge[1], new Set())\r\n    edges.get(edge[0]).add(edge[1])\r\n  }\r\n  return edges\r\n}\r\n\r\nfunction makeNodesHash(arr){\r\n  var res = new Map()\r\n  for (var i = 0, len = arr.length; i < len; i++) {\r\n    res.set(arr[i], i)\r\n  }\r\n  return res\r\n}\r\n"},"lineCount":99}},"error":null,"hash":"aebdb87b35b5f33c9f1b2739a8f5d9df","cacheData":{"env":{}}}