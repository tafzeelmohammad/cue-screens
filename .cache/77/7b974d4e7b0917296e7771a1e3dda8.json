{"id":"node_modules/axios/lib/helpers/spread.js","dependencies":[{"name":"F:\\cue-screens\\package.json","includedInParent":true,"mtime":1644311015407},{"name":"F:\\cue-screens\\.babelrc","includedInParent":true,"mtime":1644310991266},{"name":"F:\\cue-screens\\node_modules\\axios\\package.json","includedInParent":true,"mtime":1644310999379}],"generated":{"js":"'use strict';\r\n\r\n/**\r\n * Syntactic sugar for invoking a function and expanding an array for arguments.\r\n *\r\n * Common use case would be to use `Function.prototype.apply`.\r\n *\r\n *  ```js\r\n *  function f(x, y, z) {}\r\n *  var args = [1, 2, 3];\r\n *  f.apply(null, args);\r\n *  ```\r\n *\r\n * With `spread` this example can be re-written.\r\n *\r\n *  ```js\r\n *  spread(function(x, y, z) {})([1, 2, 3]);\r\n *  ```\r\n *\r\n * @param {Function} callback\r\n * @returns {Function}\r\n */\r\nmodule.exports = function spread(callback) {\r\n  return function wrap(arr) {\r\n    return callback.apply(null, arr);\r\n  };\r\n};\r\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/axios/lib/helpers/spread.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/axios/lib/helpers/spread.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/axios/lib/helpers/spread.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/axios/lib/helpers/spread.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/axios/lib/helpers/spread.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/axios/lib/helpers/spread.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/axios/lib/helpers/spread.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/axios/lib/helpers/spread.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/axios/lib/helpers/spread.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/axios/lib/helpers/spread.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/axios/lib/helpers/spread.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/axios/lib/helpers/spread.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/axios/lib/helpers/spread.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/axios/lib/helpers/spread.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/axios/lib/helpers/spread.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/axios/lib/helpers/spread.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/axios/lib/helpers/spread.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/axios/lib/helpers/spread.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/axios/lib/helpers/spread.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/axios/lib/helpers/spread.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/axios/lib/helpers/spread.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/axios/lib/helpers/spread.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/axios/lib/helpers/spread.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/axios/lib/helpers/spread.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/axios/lib/helpers/spread.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/axios/lib/helpers/spread.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/axios/lib/helpers/spread.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/axios/lib/helpers/spread.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}}],"sources":{"node_modules/axios/lib/helpers/spread.js":"'use strict';\r\n\r\n/**\r\n * Syntactic sugar for invoking a function and expanding an array for arguments.\r\n *\r\n * Common use case would be to use `Function.prototype.apply`.\r\n *\r\n *  ```js\r\n *  function f(x, y, z) {}\r\n *  var args = [1, 2, 3];\r\n *  f.apply(null, args);\r\n *  ```\r\n *\r\n * With `spread` this example can be re-written.\r\n *\r\n *  ```js\r\n *  spread(function(x, y, z) {})([1, 2, 3]);\r\n *  ```\r\n *\r\n * @param {Function} callback\r\n * @returns {Function}\r\n */\r\nmodule.exports = function spread(callback) {\r\n  return function wrap(arr) {\r\n    return callback.apply(null, arr);\r\n  };\r\n};\r\n"},"lineCount":28}},"error":null,"hash":"4d6f7895685e75146ee76eec5f148b5d","cacheData":{"env":{}}}