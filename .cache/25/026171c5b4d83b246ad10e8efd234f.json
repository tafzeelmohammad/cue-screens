{"id":"node_modules/lodash/_createCompounder.js","dependencies":[{"name":"F:\\cue-screens\\package.json","includedInParent":true,"mtime":1644311015407},{"name":"F:\\cue-screens\\.babelrc","includedInParent":true,"mtime":1644310991266},{"name":"F:\\cue-screens\\node_modules\\lodash\\package.json","includedInParent":true,"mtime":1644311008925},{"name":"./_arrayReduce","loc":{"line":1,"column":26},"parent":"F:\\cue-screens\\node_modules\\lodash\\_createCompounder.js","resolved":"F:\\cue-screens\\node_modules\\lodash\\_arrayReduce.js"},{"name":"./deburr","loc":{"line":2,"column":21},"parent":"F:\\cue-screens\\node_modules\\lodash\\_createCompounder.js","resolved":"F:\\cue-screens\\node_modules\\lodash\\deburr.js"},{"name":"./words","loc":{"line":3,"column":20},"parent":"F:\\cue-screens\\node_modules\\lodash\\_createCompounder.js","resolved":"F:\\cue-screens\\node_modules\\lodash\\words.js"}],"generated":{"js":"var arrayReduce = require('./_arrayReduce'),\r\n    deburr = require('./deburr'),\r\n    words = require('./words');\r\n\r\n/** Used to compose unicode capture groups. */\r\nvar rsApos = \"['\\u2019]\";\r\n\r\n/** Used to match apostrophes. */\r\nvar reApos = RegExp(rsApos, 'g');\r\n\r\n/**\r\n * Creates a function like `_.camelCase`.\r\n *\r\n * @private\r\n * @param {Function} callback The function to combine each word.\r\n * @returns {Function} Returns the new compounder function.\r\n */\r\nfunction createCompounder(callback) {\r\n  return function(string) {\r\n    return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');\r\n  };\r\n}\r\n\r\nmodule.exports = createCompounder;\r\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/lodash/_createCompounder.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/lodash/_createCompounder.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/lodash/_createCompounder.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/lodash/_createCompounder.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/lodash/_createCompounder.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/lodash/_createCompounder.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/lodash/_createCompounder.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/lodash/_createCompounder.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/lodash/_createCompounder.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/lodash/_createCompounder.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/lodash/_createCompounder.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/lodash/_createCompounder.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/lodash/_createCompounder.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/lodash/_createCompounder.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/lodash/_createCompounder.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/lodash/_createCompounder.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/lodash/_createCompounder.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/lodash/_createCompounder.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/lodash/_createCompounder.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/lodash/_createCompounder.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/lodash/_createCompounder.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/lodash/_createCompounder.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/lodash/_createCompounder.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/lodash/_createCompounder.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/lodash/_createCompounder.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}}],"sources":{"node_modules/lodash/_createCompounder.js":"var arrayReduce = require('./_arrayReduce'),\r\n    deburr = require('./deburr'),\r\n    words = require('./words');\r\n\r\n/** Used to compose unicode capture groups. */\r\nvar rsApos = \"['\\u2019]\";\r\n\r\n/** Used to match apostrophes. */\r\nvar reApos = RegExp(rsApos, 'g');\r\n\r\n/**\r\n * Creates a function like `_.camelCase`.\r\n *\r\n * @private\r\n * @param {Function} callback The function to combine each word.\r\n * @returns {Function} Returns the new compounder function.\r\n */\r\nfunction createCompounder(callback) {\r\n  return function(string) {\r\n    return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');\r\n  };\r\n}\r\n\r\nmodule.exports = createCompounder;\r\n"},"lineCount":25}},"error":null,"hash":"543eb935bb4a58c653c07b135a2a21e8","cacheData":{"env":{}}}